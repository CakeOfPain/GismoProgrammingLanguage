int + int ::= $ADD($1, $2)
int - int ::= $SUB($1, $2)
int * int ::= $MUL($1, $2)
int / int ::= $DIV($1, $2)
int % int ::= $MOD($1, $2)
int >> int ::= $SHR($1, $2)
int << int ::= $SHL($1, $2)
int & int ::= $BWA($1, $2)
int | int ::= $BWO($1, $2)
string + string ::= $CAT($1, $2)
string + int ::= $CAT($1, $2)
int + string ::= $CAT($1, $2)
int == int ::= {
    $EQUALS($1, $2)
}
string == string ::= $EQUALS($1, $2)
int > int ::= $GREATER($1, $2)
int < int ::= $GREATER($2, $1)
(-int) ::= $SUB(0, $1)
(+int) ::= $1
string(int) ::= $CHAR($1, $2)
symbol -> (*) ::= $LAMBDA($1, $2)

namespace ::= $TYPEDEF(0, namespace)

namespace{*} ::= {
	$TYPEDEF($QUOTE($2), Namespace)
}

ConsCell + ConsCell ::= {
  appending ::= $2
	traverser ::= $LAMBDA(x, {
		$IF($TYPEOF(x, Nil), {
      appending
   	}, {
      $CONS($CAR(x), traverser($CDR(x)))
    })
	})
  traverser($QUOTE($1))
}

Namespace.(*) ::= {
  body ::= $UNTYPE($1)
	comb ::= body + $CONS($QUOTE($2), $NIL())
	$EVAL(comb)
}

Namespace(*) ::= $1 . ($2)
Namespace{*} ::= $1 . ($2)

include ::= $LOAD

import ::= $TYPEDEF(0, import)
import(string) ::= namespace {
    include($2)
}

ConsCell(int) ::= $IF($2 < 1, $CAR($QUOTE($1)), $CDR($QUOTE($1))($2-1))

$WRITELN ::= x -> $WRITE(x + "\n")
$WRITEB2 ::= x -> {
    $WRITEB((x >> 8) & 255)
    $WRITEB(x & 255)
}
$WRITEB4 ::= x -> {
    $WRITEB((x >> 24) & 255)
    $WRITEB((x >> 16) & 255)
    $WRITEB((x >> 8) & 255)
    $WRITEB(x & 255)
}
$WRITEB8 ::= x -> {
    $WRITEB((x >> 56) & 255)
    $WRITEB((x >> 48) & 255)
    $WRITEB((x >> 40) & 255)
    $WRITEB((x >> 32) & 255)
    $WRITEB((x >> 24) & 255)
    $WRITEB((x >> 16) & 255)
    $WRITEB((x >> 8) & 255)
    $WRITEB(x & 255)
}

string :=@ (*) ::= $DEF($1, $2)
string =@@ (*) ::= $SET($1, $2)
@@string ::= $GET($1)

// SEQUENCES:

// EMPTY SEQUENCE:
_seq ::= $TYPEDEF($NIL(), _EmptySeq)
(?_EmptySeq) ::= 0
(!_EmptySeq) ::= $NIL()

// CREATING
_EmptySeq,(*) ::= $TYPEDEF($CONS(1, $CONS($2, $NIL())), _Seq)
(?_Seq) ::= $CAR($UNTYPE($1))
(!_Seq) ::= $CDR($UNTYPE($1))

// APPENDING
_Seq,(*) ::= {
    len ::= ?$1
    list ::= !$1
    element ::= $2
    inserter ::= x -> {
        $IF($TYPEOF(x, Nil), {
            $CONS(element, $NIL())
        }, {
            $CONS($CAR(x), inserter($CDR(x)))
        })
    }
    $TYPEDEF($CONS(len+1, inserter(list)), _Seq)
}

// INDEXING
_Seq(int) ::= {
    list ::= !$1
    index ::= $2
    selector ::= i -> (x -> {
        $IF(i < 1, $CAR(x), selector(i-1)($CDR(x)))
    })
    selector(index)(list)
}

(~_Seq) ::= $IF((?$1 - 1) < 1, _seq, $TYPEDEF($CONS(?$1 - 1, $CDR(!$1)), _Seq))
(*_Seq) ::= $CAR(!$1)
(~_EmptySeq) ::= _seq
(*_EmptySeq) ::= _seq

// MAPPING FUNC
_Seq map (*) ::= {
    list ::= !$1
    len ::= ?$1
    f ::= $2
    mapper ::= x -> {
        $IF($TYPEOF(x, Nil), {
            $NIL()
        }, {
            $CONS(f($CAR(x)), mapper($CDR(x)))
        })
    }

    $TYPEDEF($CONS(len, mapper(list)), _Seq)
}

_Seq replace int ::= $TYPEDEF($CONS($1, $2), _SeqReplace)
_SeqReplace with (*) ::= {
    element ::= $2
    replaceStatement ::= $UNTYPE($1)
    seq ::= $CAR(replaceStatement)
    len ::= ?seq
    index ::= $CDR(replaceStatement)

    "i" :=@ 0

    seq map x -> {
        result ::= $IF(@@"i" == index, element, x)
        "i" =@@ @@"i" + 1
        result
    }
}

string map (*) ::= {
    len ::= $STRLEN($1)
    str ::= $1
    f ::= $2
    mapper ::= i -> {
        $IF(i == len, {
            ""
        }, {
            $STR(f(str(i))) + mapper(i+1)
        })
    }

    mapper(0)
}

string foreach (*) ::= {
    len ::= $STRLEN($1)
    str ::= $1
    f ::= $2
    mapper ::= i -> {
        $IF(i == len, {
            ""
        }, {
            f(str(i))
            mapper(i+1)
        })
    }

    mapper(0)
}

_EmptySeq map (*) ::= {}


_map ::= $TYPEDEF($NIL(), _EmptyMap)

_EmptyMap{*} ::= {
    "_MAPBUILDER" :=@ _seq

    // DEFINE SYNTAX
    string:(*) ::= {
        "_MAPBUILDER" =@@ (@@"_MAPBUILDER"), $CONS($1, $2)
    }

    // EVAL ARGUMENT
    $EVAL($QUOTE($2))

    // RETURN MAP
    $TYPEDEF(@@"_MAPBUILDER", _Map)
}

(?_EmptyMap) ::= 0
(?_Map) ::= ?($UNTYPE($1))
(.._Map) ::= $UNTYPE($1) map x -> $CDR(x)
(.._EmptyMap) ::= _seq 

_Map{*} ::= {
    map ::= $1
    "_MAPBUILDER" :=@ $UNTYPE($1)

    // DEFINE SYNTAX
    string:(*) ::= {
        index ::= (map?$1)
        $IF(index == -1, {
            "_MAPBUILDER" =@@ (@@"_MAPBUILDER"), $CONS($1, $2)
        }, {
            "_MAPBUILDER" =@@ ((@@"_MAPBUILDER") replace index with $CONS($1, $2))
        })
    }

    // EVAL ARGUMENT
    $EVAL($QUOTE($2))

    // RETURN MAP
    $TYPEDEF(@@"_MAPBUILDER", _Map)
}

_Map(string) ::= {
    seq ::= $UNTYPE($1)

    $IF($TYPEOF(seq, _EmptySeq), {
        $NIL()
    }, {
        head ::= *seq
        $IF($CAR(head) == $2, {
            $CDR(head)
        }, {
            ($TYPEDEF(~seq, _Map))($2)
        })
    })
}


_EmptyMap?string ::= -1

_Map?string ::= {
    seq ::= $UNTYPE($1)
    len ::= ?seq
    searching ::= $2

    seacher ::= i -> {
        $IF(i == len, {
            -1
        }, {
            $IF(searching == $CAR(seq(i)), {
                i
            }, {
                seacher(i+1)
            })
        })
    }

    seacher(0)
}

include("toolchain/language.gsm")