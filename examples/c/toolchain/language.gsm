$WRITELN("#include <stdio.h>")

string _cat string ::= $CAT($1, $2)
string _cat symbol ::= $CAT($1, $2)
symbol _cat string ::= $CAT($1, $2)
int _cat string ::= $CAT($1, $2)
string _cat int ::= $CAT($1, $2)

symbol := int ::= {
    $WRITELN("const int " _cat $1 _cat " = " _cat $2 _cat ";")
    $EXPORT($1, $TYPEDEF($1, Integer))
}

symbol := Integer ::= {
    $WRITELN("const int " _cat $1 _cat " = " _cat $UNTYPE($2) _cat ";")
    $EXPORT($1, $TYPEDEF($1, Integer))
}

symbol := string ::= {
    $EXPORT($1, $TYPEDEF($2, String))
}

symbol := String ::= {
    $EXPORT($1, $TYPEDEF($2, String))
}

function ::= $TYPEDEF(0, function)
int ::= $TYPEDEF(0, int)
function() ::= $TYPEDEF(0, VoidProtoFunc)
VoidProtoFunc{*} ::= $TYPEDEF($QUOTE($2), VoidDefFunc)
VoidProtoFunc -> int ::= $TYPEDEF($UNTYPE($1), IntProtoFunc)

IntProtoFunc{*} ::= $TYPEDEF($QUOTE($2), IntDefFunc)

symbol := VoidProtoFunc ::= {
    $WRITELN("void " _cat $1 _cat "();")
    $EXPORT($1, $TYPEDEF($1, VoidFunc))
}

symbol := VoidDefFunc ::= {
    $WRITELN("void " _cat $1 _cat "() {")
    {
        $EVAL($QUOTE($1 ::= $TYPEDEF($1, VoidFunc)))
        VoidFunc() ::= {
            $WRITE("\t")
            $WRITE($UNTYPE($1))
            $WRITELN("();")
        }
        $EVAL($UNTYPE($2))
    }
    $WRITELN("}")
    $EXPORT($1, $TYPEDEF($1, VoidFunc))
}



symbol := IntProtoFunc ::= {
    $WRITELN("int " _cat $1 _cat "();")
    $EXPORT($1, $TYPEDEF($1, IntFunc))
}

symbol := IntDefFunc ::= {
    $WRITELN("int " _cat $1 _cat "() {")
    {
        $EVAL($QUOTE($1 ::= $TYPEDEF($1, VoidFunc)))
        VoidFunc() ::= {
            $WRITE("\t")
            $WRITE($UNTYPE($1))
            $WRITELN("();")
        }
        $EVAL($UNTYPE($2))
    }
    $WRITELN("}")
    $EXPORT($1, $TYPEDEF($1, IntFunc))
}