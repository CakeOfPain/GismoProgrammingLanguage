
"CONST_NUM8" =@@ _map
"CONST_NUM16" =@@ _map
"CONST_NUM32" =@@ _map
"CONST_NUM64" =@@ _map
"CONST_TEXT" =@@ _map
"CONST_FUNC" =@@ _map

"GLOBAL_NUM8" =@@ 0
"GLOBAL_NUM16" =@@ 0
"GLOBAL_NUM32" =@@ 0
"GLOBAL_NUM64" =@@ 0
"GLOBAL_TEXT" =@@ 0
"GLOBAL_FUNC" =@@ 0
"GLOBAL_CMPX" =@@ 0

num8 ::= $TYPEDEF($NIL(), num8)
num16 ::= $TYPEDEF($NIL(), num16)
num32 ::= $TYPEDEF($NIL(), num32)
num64 ::= $TYPEDEF($NIL(), num64)
text ::= $TYPEDEF($NIL(), text)
func ::= $TYPEDEF($NIL(), func)
cmplx ::= $TYPEDEF($NIL(), cmplx)

symbol: num8 ::= {
    "CONST_NUM8" =@@ @@"CONST_NUM8" {
        $CAT("", $1): $NIL()
    }
    $TYPEDEF($1, decl_num8)
}

decl_num8 = int ::= {
    "CONST_NUM8" =@@ @@"CONST_NUM8" {
        $CAT("", ($UNTYPE($1))): $2
    }
}

symbol: num16 ::= {
    "CONST_NUM16" =@@ @@"CONST_NUM16" {
        $CAT("", $1): $NIL()
    }
    $TYPEDEF($1, decl_num16)
}

decl_num16 = int ::= {
    "CONST_NUM16" =@@ @@"CONST_NUM16" {
        $CAT("", ($UNTYPE($1))): $2
    }
}

symbol: num32 ::= {
    "CONST_NUM32" =@@ @@"CONST_NUM32" {
        $CAT("", $1): $NIL()
    }
    $TYPEDEF($1, decl_num32)
}

decl_num32 = int ::= {
    "CONST_NUM32" =@@ @@"CONST_NUM32" {
        $CAT("", ($UNTYPE($1))): $2
    }
}

symbol: num64 ::= {
    "CONST_NUM64" =@@ @@"CONST_NUM64" {
        $CAT("", $1): $NIL()
    }
    $TYPEDEF($1, decl_num64)
}

decl_num64 = int ::= {
    "CONST_NUM64" =@@ @@"CONST_NUM64" {
        $CAT("", ($UNTYPE($1))): $2
    }
}

symbol: text ::= {
    "CONST_TEXT" =@@ @@"CONST_TEXT" {
        $CAT("", $1): $NIL()
    }
    $TYPEDEF($1, decl_text)
}

decl_text = string ::= {
    "CONST_TEXT" =@@ @@"CONST_TEXT" {
        $CAT("", ($UNTYPE($1))): $2
    }
}

symbol: func ::= {
    "CONST_FUNC" =@@ @@"CONST_FUNC" {
        $CAT("", $1): $NIL()
    }
    $TYPEDEF($1, decl_func)
}

decl_func = (*) ::= {
    "NUM8" =@@ _map
    "NUM16" =@@ _map
    "NUM32" =@@ _map
    "NUM64" =@@ _map
    "TEXT" =@@ _map
    "FUNC" =@@ _map
    "CMPLX" =@@ _map
    "INSTR" =@@ ""

    symbol: num8 ::= "NUM8" =@@ @@"NUM8" {
        $CAT("", $1): $NIL()
    }

    symbol: num16 ::= "NUM16" =@@ @@"NUM16" {
        $CAT("", $1): $NIL()
    }

    symbol: num32 ::= "NUM32" =@@ @@"NUM32" {
        $CAT("", $1): $NIL()
    }
    
    symbol: num64 ::= "NUM64" =@@ @@"NUM64" {
        $CAT("", $1): $NIL()
    }

    symbol: text ::= "TEXT" =@@ @@"TEXT" {
        $CAT("", $1): $NIL()
    }

    symbol: func ::= "FUNC" =@@ @@"FUNC" {
        $CAT("", $1): $NIL()
    }

    symbol: cmplx ::= "CMPLX" =@@ @@"CMPLX" {
        $CAT("", $1): $NIL()
    }

    string WRITEB int ::= {
        $1 =@@ $CAT(@@$1, $STR($2 & 255))
    }

    string WRITEB2 int ::= {
        $1 =@@ $CAT(@@$1, $STR(($2 >> 8) & 255))
        $1 =@@ $CAT(@@$1, $STR($2 & 255))
    }

    string WRITEB4 int ::= {
        $1 =@@ $CAT(@@$1, $STR(($2 >> 24) & 255))
        $1 =@@ $CAT(@@$1, $STR(($2 >> 16) & 255))
        $1 =@@ $CAT(@@$1, $STR(($2 >> 8) & 255))
        $1 =@@ $CAT(@@$1, $STR($2 & 255))
    }

    string WRITEB8 int ::= {
        $1 =@@ $CAT(@@$1, $STR(($2 >> 56) & 255))
        $1 =@@ $CAT(@@$1, $STR(($2 >> 48) & 255))
        $1 =@@ $CAT(@@$1, $STR(($2 >> 40) & 255))
        $1 =@@ $CAT(@@$1, $STR(($2 >> 32) & 255))
        $1 =@@ $CAT(@@$1, $STR(($2 >> 24) & 255))
        $1 =@@ $CAT(@@$1, $STR(($2 >> 16) & 255))
        $1 =@@ $CAT(@@$1, $STR(($2 >> 8) & 255))
        $1 =@@ $CAT(@@$1, $STR($2 & 255))
    }

    string NUMBER int ::= {
        $1 =@@ $CAT(@@$1, $STR($2))
        $TYPEDEF($CONS($1, $2), INSTR)
    }
    INSTR WITH symbol ::= $TYPEDEF($CONS($1, $2), INSTRWITH)
    INSTRWITH AT string ::= $TYPEDEF($CONS($1, $2), INSTRWITHAT)
    INSTRWITHAT USING symbol ::= {
        instr ::= $CAR($UNTYPE($1))
        at ::= $CDR($UNTYPE($1))
        instrwith ::= $CAR($UNTYPE(instr))
        position ::= $CDR($UNTYPE(instr))
        index ::= $CAR($UNTYPE(instrwith))
        index $2 (@@at ? $CAT("", position))
    }

    lc1 ::= $TYPEDEF(0, lc1)
    lc2 ::= $TYPEDEF(0, lc2)
    lc4 ::= $TYPEDEF(0, lc4)
    lc8 ::= $TYPEDEF(0, lc8)
    lg1 ::= $TYPEDEF(0, lg1)
    lg2 ::= $TYPEDEF(0, lg2)
    lg4 ::= $TYPEDEF(0, lg4)
    lg8 ::= $TYPEDEF(0, lg8)
    sg1 ::= $TYPEDEF(0, sg1)
    sg2 ::= $TYPEDEF(0, sg2)
    sg4 ::= $TYPEDEF(0, sg4)
    sg8 ::= $TYPEDEF(0, sg8)
    ll1 ::= $TYPEDEF(0, ll1)
    ll2 ::= $TYPEDEF(0, ll2)
    ll4 ::= $TYPEDEF(0, ll4)
    ll8 ::= $TYPEDEF(0, ll8)
    sl1 ::= $TYPEDEF(0, sl1)
    sl2 ::= $TYPEDEF(0, sl2)
    sl4 ::= $TYPEDEF(0, sl4)
    sl8 ::= $TYPEDEF(0, sl8)
    adi ::= $TYPEDEF(0, adi)
    adu ::= $TYPEDEF(0, adu)
    adf ::= $TYPEDEF(0, adf)
    sbi ::= $TYPEDEF(0, sbi)
    sbu ::= $TYPEDEF(0, sbu)
    sbf ::= $TYPEDEF(0, sbf)
    mli ::= $TYPEDEF(0, mli)
    mlu ::= $TYPEDEF(0, mlu)
    mlf ::= $TYPEDEF(0, mlf)
    dvi ::= $TYPEDEF(0, dvi)
    dvu ::= $TYPEDEF(0, dvu)
    dvf ::= $TYPEDEF(0, dvf)
    and ::= $TYPEDEF(0, and)
    or ::= $TYPEDEF(0, or)
    not ::= $TYPEDEF(0, not)
    eqi ::= $TYPEDEF(0, eqi)
    equ ::= $TYPEDEF(0, equ)
    eqf ::= $TYPEDEF(0, eqf)
    eqiu ::= $TYPEDEF(0, eqiu)
    eqfi ::= $TYPEDEF(0, eqfi)
    eqfu ::= $TYPEDEF(0, eqfu)
    gti ::= $TYPEDEF(0, gti)
    gtu ::= $TYPEDEF(0, gtu)
    gtf ::= $TYPEDEF(0, gtf)
    gtiu ::= $TYPEDEF(0, gtiu)
    gtfi ::= $TYPEDEF(0, gtfi)
    gtfu ::= $TYPEDEF(0, gtfu)
    sti ::= $TYPEDEF(0, sti)
    stu ::= $TYPEDEF(0, stu)
    stf ::= $TYPEDEF(0, stf)
    stiu ::= $TYPEDEF(0, stiu)
    stfi ::= $TYPEDEF(0, stfi)
    stfu ::= $TYPEDEF(0, stfu)
    lgc ::= $TYPEDEF(0, lgc)
    llc ::= $TYPEDEF(0, llc)
    sgc ::= $TYPEDEF(0, sgc)
    slc ::= $TYPEDEF(0, slc)
    ade ::= $TYPEDEF(0, ade)
    rme ::= $TYPEDEF(0, rme)
    lnc ::= $TYPEDEF(0, lnc)
    lde ::= $TYPEDEF(0, lde)
    ste ::= $TYPEDEF(0, ste)
    lcf ::= $TYPEDEF(0, lcf)
    lgf ::= $TYPEDEF(0, lgf)
    llf ::= $TYPEDEF(0, llf)
    sgf ::= $TYPEDEF(0, sgf)
    slf ::= $TYPEDEF(0, slf)
    clf ::= $TYPEDEF(0, clf)
    ret ::= $TYPEDEF(0, ret)
    pop ::= $TYPEDEF(0, pop)
    swap ::= $TYPEDEF(0, swap)
    rot ::= $TYPEDEF(0, rot)
    exit ::= $TYPEDEF(0, exit)
    lct ::= $TYPEDEF(0, lct)
    lgt ::= $TYPEDEF(0, lgt)
    llt ::= $TYPEDEF(0, llt)
    sgt ::= $TYPEDEF(0, sgt)
    slt ::= $TYPEDEF(0, slt)
    adc ::= $TYPEDEF(0, adc)
    rmc ::= $TYPEDEF(0, rmc)
    popc ::= $TYPEDEF(0, popc)
    lnt ::= $TYPEDEF(0, lnt)
    getc ::= $TYPEDEF(0, getc)
    cpc ::= $TYPEDEF(0, cpc)
    cpt ::= $TYPEDEF(0, cpt)
    puti ::= $TYPEDEF(0, puti)
    putu ::= $TYPEDEF(0, putu)
    putf ::= $TYPEDEF(0, putf)
    putc ::= $TYPEDEF(0, putc)
    put ::= $TYPEDEF(0, put)
    nwl ::= $TYPEDEF(0, nwl)
    c2t ::= $TYPEDEF(0, c2t)
    ins ::= $TYPEDEF(0, ins)
    jpa ::= $TYPEDEF(0, jpa)
    jpn ::= $TYPEDEF(0, jpn)
    jpp ::= $TYPEDEF(0, jpp)
    jpat ::= $TYPEDEF(0, jpat)
    jpaf ::= $TYPEDEF(0, jpaf)
    jpnt ::= $TYPEDEF(0, jpnt)
    jpnf ::= $TYPEDEF(0, jpnf)
    jppt ::= $TYPEDEF(0, jppt)
    jppf ::= $TYPEDEF(0, jppf)
    modi ::= $TYPEDEF(0, modi)
    modu ::= $TYPEDEF(0, modu)
    mty ::= $TYPEDEF(0, mty)
    mkc ::= $TYPEDEF(0, mkc)
    inpi ::= $TYPEDEF(0, inpi)
    inpu ::= $TYPEDEF(0, inpu)
    inpf ::= $TYPEDEF(0, inpf)
    inpt ::= $TYPEDEF(0, inpt)
    inp ::= $TYPEDEF(0, inp)
    setc ::= $TYPEDEF(0, setc)
    lda ::= $TYPEDEF(0, lda)
    i2u ::= $TYPEDEF(0, i2u)
    i2f ::= $TYPEDEF(0, i2f)
    u2i ::= $TYPEDEF(0, u2i)
    u2f ::= $TYPEDEF(0, u2f)
    f2i ::= $TYPEDEF(0, f2i)
    f2u ::= $TYPEDEF(0, f2u)
    isn ::= $TYPEDEF(0, isn)
    ist ::= $TYPEDEF(0, ist)
    isc ::= $TYPEDEF(0, isc)
    isf ::= $TYPEDEF(0, isf)
    isnt ::= $TYPEDEF(0, isnt)

    lc1(symbol) ::= "INSTR" NUMBER 1 WITH $2 AT "CONST_NUM8" USING WRITEB4
    lc2(symbol) ::= "INSTR" NUMBER 2 WITH $2 AT "CONST_NUM16" USING WRITEB4
    lc4(symbol) ::= "INSTR" NUMBER 3 WITH $2 AT "CONST_NUM32" USING WRITEB4
    lc8(symbol) ::= "INSTR" NUMBER 4 WITH $2 AT "CONST_NUM64" USING WRITEB4
    lg1() ::= "INSTR" NUMBER 5
    lg2() ::= "INSTR" NUMBER 6
    lg4() ::= "INSTR" NUMBER 7
    lg8() ::= "INSTR" NUMBER 8
    sg1() ::= "INSTR" NUMBER 9
    sg2() ::= "INSTR" NUMBER 10
    sg4() ::= "INSTR" NUMBER 11
    sg8() ::= "INSTR" NUMBER 12
    ll1(symbol) ::= "INSTR" NUMBER 13 WITH $2 AT "NUM8" USING WRITEB4
    ll2(symbol) ::= "INSTR" NUMBER 14 WITH $2 AT "NUM16" USING WRITEB4
    ll4(symbol) ::= "INSTR" NUMBER 15 WITH $2 AT "NUM32" USING WRITEB4
    ll8(symbol) ::= "INSTR" NUMBER 16 WITH $2 AT "NUM64" USING WRITEB4
    sl1(symbol) ::= "INSTR" NUMBER 17 WITH $2 AT "NUM8" USING WRITEB4
    sl2(symbol) ::= "INSTR" NUMBER 18 WITH $2 AT "NUM16" USING WRITEB4
    sl4(symbol) ::= "INSTR" NUMBER 19 WITH $2 AT "NUM32" USING WRITEB4
    sl8(symbol) ::= "INSTR" NUMBER 20 WITH $2 AT "NUM64" USING WRITEB4
    adi() ::= "INSTR" NUMBER 21
    adu() ::= "INSTR" NUMBER 22
    adf() ::= "INSTR" NUMBER 23
    sbi() ::= "INSTR" NUMBER 24
    sbu() ::= "INSTR" NUMBER 25
    sbf() ::= "INSTR" NUMBER 26
    mli() ::= "INSTR" NUMBER 27
    mlu() ::= "INSTR" NUMBER 28
    mlf() ::= "INSTR" NUMBER 29
    dvi() ::= "INSTR" NUMBER 30
    dvu() ::= "INSTR" NUMBER 31
    dvf() ::= "INSTR" NUMBER 32
    and() ::= "INSTR" NUMBER 33
    or() ::= "INSTR" NUMBER 34
    not() ::= "INSTR" NUMBER 35
    eqi() ::= "INSTR" NUMBER 36
    equ() ::= "INSTR" NUMBER 37
    eqf() ::= "INSTR" NUMBER 38
    eqiu() ::= "INSTR" NUMBER 39
    eqfi() ::= "INSTR" NUMBER 40
    eqfu() ::= "INSTR" NUMBER 41
    gti() ::= "INSTR" NUMBER 42
    gtu() ::= "INSTR" NUMBER 43
    gtf() ::= "INSTR" NUMBER 44
    gtiu() ::= "INSTR" NUMBER 45
    gtfi() ::= "INSTR" NUMBER 46
    gtfu() ::= "INSTR" NUMBER 47
    sti() ::= "INSTR" NUMBER 48
    stu() ::= "INSTR" NUMBER 49
    stf() ::= "INSTR" NUMBER 50
    stiu() ::= "INSTR" NUMBER 51
    stfi() ::= "INSTR" NUMBER 52
    stfu() ::= "INSTR" NUMBER 53
    lgc() ::= "INSTR" NUMBER 54
    llc(symbol) ::= "INSTR" NUMBER 55 WITH $2 AT "CMPLX" USING WRITEB4
    sgc() ::= "INSTR" NUMBER 56
    slc(symbol) ::= "INSTR" NUMBER 57 WITH $2 AT "CMPLX" USING WRITEB4
    ade() ::= "INSTR" NUMBER 58
    rme() ::= "INSTR" NUMBER 59
    lnc() ::= "INSTR" NUMBER 60
    lde() ::= "INSTR" NUMBER 61
    ste() ::= "INSTR" NUMBER 62
    lcf(symbol) ::= "INSTR" NUMBER 63 WITH $2 AT "CONST_FUNC" USING WRITEB4
    lgf() ::= "INSTR" NUMBER 64
    llf(symbol) ::= "INSTR" NUMBER 65 WITH $2 AT "FUNC" USING WRITEB4
    sgf() ::= "INSTR" NUMBER 66
    slf(symbol) ::= "INSTR" NUMBER 67 WITH $2 AT "FUNC" USING WRITEB4
    clf(int) ::= {
        "INSTR" NUMBER 68
        "INSTR" WRITEB4 $2
    }
    ret() ::= "INSTR" NUMBER 69
    pop() ::= "INSTR" NUMBER 70
    swap() ::= "INSTR" NUMBER 71
    rot() ::= "INSTR" NUMBER 72
    exit() ::= "INSTR" NUMBER 73
    lct(symbol) ::= "INSTR" NUMBER 74 WITH $2 AT "CONST_TEXT" USING WRITEB4
    lgt() ::= "INSTR" NUMBER 75
    llt() ::= "INSTR" NUMBER 76 WITH $2 AT "TEXT" USING WRITEB4
    sgt() ::= "INSTR" NUMBER 77
    slt() ::= "INSTR" NUMBER 78 WITH $2 AT "TEXT" USING WRITEB4
    adc() ::= "INSTR" NUMBER 79
    rmc() ::= "INSTR" NUMBER 80
    popc() ::= "INSTR" NUMBER 81
    lnt() ::= "INSTR" NUMBER 82
    getc() ::= "INSTR" NUMBER 83
    cpc() ::= "INSTR" NUMBER 84
    cpt() ::= "INSTR" NUMBER 85
    puti() ::= "INSTR" NUMBER 86
    putu() ::= "INSTR" NUMBER 87
    putf() ::= "INSTR" NUMBER 88
    putc() ::= "INSTR" NUMBER 89
    put() ::= "INSTR" NUMBER 90
    nwl() ::= "INSTR" NUMBER 91
    c2t() ::= "INSTR" NUMBER 92
    ins() ::= "INSTR" NUMBER 93
    jpa(int) ::= {
        "INSTR" NUMBER 94
        "INSTR" WRITEB4 $2
    }
    jpn(int) ::=  {
        "INSTR" NUMBER 95
        "INSTR" WRITEB2 $2
    }
    jpp(int) ::= {
        "INSTR" NUMBER 96
        "INSTR" WRITEB2 $2
    }
    jpat(int) ::=  {
        "INSTR" NUMBER 97
        "INSTR" WRITEB4 $2
    }
    jpaf(int) ::= {
        "INSTR" NUMBER 98
        "INSTR" WRITEB4 $2
    }
    jpnt(int) ::=  {
        "INSTR" NUMBER 99
        "INSTR" WRITEB2 $2
    }
    jpnf(int) ::=  {
        "INSTR" NUMBER 100
        "INSTR" WRITEB2 $2
    }
    jppt(int) ::=  {
        "INSTR" NUMBER 101
        "INSTR" WRITEB2 $2
    }
    jppf(int) ::=  {
        "INSTR" NUMBER 102
        "INSTR" WRITEB2 $2
    }
    modi() ::= "INSTR" NUMBER 103
    modu() ::= "INSTR" NUMBER 104
    mty() ::= "INSTR" NUMBER 105
    mkc() ::= "INSTR" NUMBER 106
    inpi() ::= "INSTR" NUMBER 107
    inpu() ::= "INSTR" NUMBER 108
    inpf() ::= "INSTR" NUMBER 109
    inpt() ::= "INSTR" NUMBER 110
    inp() ::= "INSTR" NUMBER 111
    setc() ::= "INSTR" NUMBER 112
    lda(int) ::=  {
        "INSTR" NUMBER 113
        "INSTR" WRITEB4 $2
    }
    i2u() ::= "INSTR" NUMBER 114
    i2f() ::= "INSTR" NUMBER 115
    u2i() ::= "INSTR" NUMBER 116
    u2f() ::= "INSTR" NUMBER 117
    f2i() ::= "INSTR" NUMBER 118
    f2u() ::= "INSTR" NUMBER 119
    isn() ::= "INSTR" NUMBER 120
    ist() ::= "INSTR" NUMBER 121
    isc() ::= "INSTR" NUMBER 122
    isf() ::= "INSTR" NUMBER 123
    isnt() ::= "INSTR" NUMBER 124

    symbol{*} ::= {
        $1 ::= $STRLEN(@@"INSTR")
        $EVAL($QUOTE($2))
    }

    $EVAL($QUOTE($2))

    "CONST_FUNC" =@@ @@"CONST_FUNC" {
        $CAT("", ($UNTYPE($1))): _map {
            "NUM8": ?(@@"NUM8")
            "NUM16": ?(@@"NUM16")
            "NUM32": ?(@@"NUM32")
            "NUM64": ?(@@"NUM64")
            "TEXT": ?(@@"TEXT")
            "FUNC": ?(@@"FUNC")
            "CMPLX": ?(@@"CMPLX")
            "INSTR": @@"INSTR"
        }
    }
}